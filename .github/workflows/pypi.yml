name: pypi

# 任务触发
on:
  # 当 提交到当前仓库时立即运行
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  manylinux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py_version: ['cp38-cp38', 'cp39-cp39']
    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: version
        uses: frabert/replace-string-action@v2
        with:
          pattern: 'refs/tags/v(.+)'
          string: ${{ github.ref }}
          replace-with: 'v$1'

      - name: Build on manylinux2010
        uses: GCS-ZHN/python-wheels-manylinux-build@v1.0
        with:
          python-versions: ${{ matrix.py_version }}
          build-requirements: 'versioneer[toml] numpy<=1.19.5 setuptools>=42'
          system-packages: gcc-gfortran

      - uses: actions/upload-artifact@v3
        with:
          name: build_${{ steps.version.outputs.replaced }}
          path: dist/*-manylinux*.whl
          retention-days: 1

  other-build:
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        py_version: ['3.8', '3.9']
        os: ['windows-2022', 'macos-12']

    steps:
      - uses: actions/checkout@v3

      - name: "Setup Python"
        uses: actions/setup-python@v4
        with:
           python-version: ${{ matrix.py_version }}

      - name: Setup MSBuild.exe
        if: startsWith(matrix.os, 'windows')
        uses: microsoft/setup-msbuild@v1.1

      - name: Setup fortran
        uses: awvwgk/setup-fortran@main
        id: setup-fortran
        with:
          compiler: gcc
          version: 11

      - name: Check fortran version
        run: ${{ env.FC }} --version
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}

      - name: "Build and test for Linux"
        if: startsWith(matrix.os, 'windows')==false
        run: |
          pip install --upgrade pip &&
          pip install build &&
          python -m build &&
          pip install dist/annopro*whl &&
          annopro --version

      - name: "Build and test for Windows"
        if: startsWith(matrix.os, 'windows')
        run: |
          pip install --upgrade pip;
          pip install build ;
          python -m build ;
          Get-ChildItem -Path dist -Filter annopro*whl | ForEach-Object{ pip install "$_" };
          annopro --version

      - name: Get version
        id: version
        uses: frabert/replace-string-action@v2
        with:
          pattern: 'refs/tags/v(.+)'
          string: ${{ github.ref }}
          replace-with: 'v$1'

      - uses: actions/upload-artifact@v3
        with:
          name: build_${{ steps.version.outputs.replaced }}
          path: dist/*
          retention-days: 1

  release:
    needs: ["other-build", "manylinux-build"]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: version
        uses: frabert/replace-string-action@v2
        with:
          pattern: 'refs/tags/v(.+)'
          string: ${{ github.ref }}
          replace-with: 'v$1'

      - uses: actions/download-artifact@v3
        with:
          name: build_${{ steps.version.outputs.replaced }}
          path: dist/

      - name: Release to GitHub
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/*
          draft: true

      - name: Relase to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with: 
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository_url: ${{ vars.PYPI_URL }}
          packages_dir: dist/